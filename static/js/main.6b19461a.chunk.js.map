{"version":3,"sources":["components/Home.js","config.js","api.js","components/Navigation.js","components/AddItemModal.js","components/CheckList.js","components/auth/Login.js","components/auth/Signup.js","components/Account.js","components/ProtectedRoute.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","icon","faCheck","href","onClick","this","handleOpen","Component","urls","host","window","location","hostname","config","API_URL","defaultOptions","baseURL","headers","instance","axios","create","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","Navigation","removeItem","isAuthenticated","pathName","pathname","type","theme","expand","navbar","active","disabled","logUserOut","AddItemModal","props","context","updateTitle","e","target","value","setState","title","showTitleError","updateDesciption","description","updateDueDate","dueDate","submitForm","preventDefault","showError","postData","state","due_date","apiClient","post","then","res","nonfieldError","showNonFieldError","handleAddItemModal","catch","err","response","data","non_field_errors","nonFieldErrorMessage","open","onHide","htmlFor","invalid","id","onChange","updateDescription","variant","CheckList","completeItem","bind","unCompleteItem","deleteItem","items","showAddItemModal","loadItems","get","item","patch","pk","complete","map","i","console","log","delete","filter","size","faRedo","showModal","editItem","faEdit","renderActions","faTrash","length","sm","lg","renderList","faPlus","renderItems","Login","updateEmail","username","email","showUsernameError","updatePassword","password","showPasswordError","setItem","history","push","showEmailError","withRouter","Signup","handleClose","Account","populateForm","accountInfo","account","fields","submitUpdateAccountForm","showEmailUpdatedSuccessMessage","updateConfirmPassword","confirm_password","submitUpdatePasswordForm","showPasswordUpdatedSuccessMessage","passwordError","dismissEmailUpdateSuccessMessage","dismissPasswordUpdateSuccessMessage","dismissible","ProtectedRoute","component","to","React","App","path","exact","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6b19461a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nexport default class Home extends Component {\n\n    render() {\n        return (\n            <div>\n                <header className=\"home\">\n                    <h1>C-lister <FontAwesomeIcon icon={faCheck} /></h1>\n                    <p>Check those things off the list.</p>\n                    <p>\n                        <a href=\"/signup\" className=\"sign-up\" onClick={this.handleOpen}>Sign up</a>\n                    </p>\n                    <p className=\"aleady-a-user\">\n                        Already a user? <a href=\"/login\" className=\"sign-in\" onClick={this.handleOpen}> Log in</a>\n                    </p>\n                </header>\n            </div>\n        );\n    }\n}","const urls = {\n    local: 'localhost:8000',\n    test: 'c-lister.herokuapp.com'\n};\n\nconst host = window.location.hostname;\nconst baseUrl = host === 'localhost' ? urls.local : urls.test;\nconst apiUrl = `http://${baseUrl}/api/v1`;\n\nconst config = {\n    API_URL: apiUrl\n};\n\nexport default config;","import axios from 'axios';\nimport config from './config';\n\nconst defaultOptions = {\n    baseURL: config.API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    }\n};\n\nlet instance = axios.create(defaultOptions);\ninstance.interceptors.request.use(config => {\n        const token = localStorage.getItem('auth_token');\n        config.headers.Authorization =  token ? `Token ${token}` : null;\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    });\n\nexport default instance;","import React, { Component } from 'react';\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'shards-react';\n\nexport default class Navigation extends Component {\n\n    logUserOut() {\n        localStorage.removeItem('auth_token');\n        window.location = '/';\n    }\n\n    render() {\n        const isAuthenticated = localStorage.getItem('auth_token');\n        const pathName = window.location.pathname;\n\n        return (\n            <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\n                <NavbarBrand href=\"/\">C-lister</NavbarBrand>\n\n                { isAuthenticated ? \n                    <Nav navbar className=\"ml-auto\">\n                        <NavItem>\n                            <NavLink active={ pathName === '/list' } disabled={ pathName === '/list' } href=\"/list\">\n                                Checklist\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink active={ pathName === '/account' } disabled={ pathName === '/account' } href=\"/account\">\n                                Account\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/\" onClick={ this.logUserOut }>\n                                Log out\n                            </NavLink>\n                        </NavItem>\n                    </Nav>\n                    : ''\n                }\n\n            </Navbar>\n        );\n    }\n}","import React, { Component } from 'react';\nimport apiClient from '../api';\nimport config from '../config';\nimport { \n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    ModalFooter,\n    Form,\n    FormGroup,\n    FormInput,\n    FormFeedback \n} from \"shards-react\";\n\nclass AddItemModal extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {\n            open: this.props.open,\n            title: '',\n            description: '',\n            dueDate: '',\n            showTitleError: false,\n            nonfieldError: '',\n            showNonFieldError: false\n        };\n    }\n\n    updateTitle = e => {\n        if (e.target.value !== '') {\n            this.setState({\n                title: e.target.value,\n                showTitleError: false\n            });\n        }\n    }\n\n    updateDesciption = e => {\n        this.setState({ description: e.target.value });\n    }\n\n    updateDueDate = e => {\n        this.setState({ dueDate: e.target.value });\n    }\n\n    submitForm = e => {\n        e.preventDefault();\n        this.setState({ showError: false });\n\n        let postData = {\n            title: this.state.title,\n            description: this.state.description\n        };\n\n        if (this.state.dueDate) {\n            postData.due_date = this.state.dueDate;\n        }\n\n        apiClient.post(`${config.API_URL}/items/`, postData)\n        .then(res => {\n            // reset add item form and close modal\n            this.setState({\n                title: '',\n                description: '',\n                dueDate: '',\n                showTitleError: false,\n                nonfieldError: '',\n                showNonFieldError: false\n            });\n            this.props.handleAddItemModal();\n        })\n        .catch(err => {\n            if (err.response) {\n                if (err.response.data.title) {\n                    this.setState({ showTitleError: true })\n                }\n\n                if (err.response.data.non_field_errors) {\n                    this.setState(() => ({\n                        showNonFieldError: true,\n                        nonFieldErrorMessage: err.response.data.non_field_errors\n                    }));\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal open={this.props.open} onHide={this.props.handleAddItemModal}>\n                    <ModalHeader>Add Item</ModalHeader>\n                    <ModalBody>\n                        <Form>\n                            <FormGroup>\n                                <label htmlFor=\"title\">Title</label>\n                                <FormInput invalid={ this.state.showTitleError } id=\"title\" type=\"text\" onChange={this.updateTitle} />\n                                <FormFeedback type=\"invalid\">Please enter a title</FormFeedback>\n                            </FormGroup>\n                            <FormGroup>\n                                <label htmlFor=\"description\">Description</label>\n                                <FormInput id=\"description\" type=\"text\" onChange={this.updateDescription} />\n                            </FormGroup>\n                            <FormGroup>\n                                <label htmlFor=\"due-date\">Due Date</label>\n                                <FormInput id=\"due-date\" type=\"date\" onChange={this.updateDueDate} />\n                                <FormFeedback type=\"invalid\">Please enter a due date</FormFeedback>\n                            </FormGroup>\n                        </Form>\n                        <p className={this.state.showNonFieldError ? 'show-error' : 'hide-error'}>\n                            { this.state.nonfieldError }\n                        </p>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"primary\" onClick={this.submitForm}>Add</Button>\n                        <Button variant=\"secondary\" onClick={this.props.handleAddItemModal}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default AddItemModal;\n","import React, { Component } from 'react';\nimport apiClient from '../api';\nimport config from \"../config\";\nimport Navigation from './Navigation';\nimport AddItemModal from './AddItemModal';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faPlus, faRedo, faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport {\n    Container,\n    Row,\n    Col,\n    ListGroup,\n    ListGroupItem,\n    Button,\n    // FormInput\n} from 'shards-react';\n\nexport default class CheckList extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.completeItem = this.completeItem.bind(this);\n        this.unCompleteItem = this.unCompleteItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.handleAddItemModal = this.handleAddItemModal.bind(this);\n\n        this.state = {\n            items: [],\n            showAddItemModal: false\n        };\n    }\n\n    componentDidMount() {\n        this.loadItems();\n    }\n\n    loadItems() {\n        apiClient.get(`${config.API_URL}/items/`)\n            .then(res => {\n                this.setState({ items: res.data });\n            })\n            .catch(err => {\n                if(err.response) {\n                    // redirect to login page....\n                }\n            });\n    }\n\n    completeItem(item) {\n        apiClient.patch(`${config.API_URL}/items/${item.pk}/`, {\n            complete: true\n        })\n        .then(res => {\n            this.setState(state => {\n                return state.items.map(i => {\n                    i.complete = (i.pk === item.pk) ? true : i.complete;\n                    return i;\n                });\n              });\n        })\n        .catch(e => console.log(e));\n    }\n\n    unCompleteItem(item) {\n        apiClient.patch(`${config.API_URL}/items/${item.pk}/`, {\n            complete: false\n        })\n        .then(res => {\n            this.setState(state => {\n                return state.items.map(i => {\n                    i.complete = (i.pk === item.pk) ? false : i.complete;\n                    return i;\n                });\n              });\n        })\n        .catch(e => console.log(e));\n    }\n\n    deleteItem(item) {\n        apiClient.delete(`${config.API_URL}/items/${item.pk}/`)\n        .then(res => {\n            this.setState(state => {\n                const items = state.items.filter(i => i.pk !== item.pk);\n                return { items };\n            });\n        })\n        .catch(e => console.log(e));\n    }\n\n    updateTitle(item) {\n        console.log(`updating title...`);\n    }\n\n    editItem(item) {\n        console.log(`editing item....${item}`);\n    }\n\n    renderActions(item) {\n        if (item.complete) {\n            return ( \n                <Button className=\"mr-2\" size=\"sm\" theme=\"secondary\" onClick={() => this.unCompleteItem(item)}>\n                    <FontAwesomeIcon icon={faRedo} />\n                </Button>\n            );\n        }\n\n        return ( \n            <Button className=\"mr-2\" size=\"sm\" theme=\"secondary\" onClick={() => this.completeItem(item)}>\n                <FontAwesomeIcon icon={faCheck} />\n            </Button> \n        );\n    }\n\n    handleAddItemModal() {\n        let showModal = !this.state.showAddItemModal;\n        this.setState({ showAddItemModal: showModal });\n        this.loadItems();\n    }\n\n    renderList() {\n        return this.state.items.map((item, i) => {\n            return (\n                    <ListGroupItem key={i}>\n                        <span className={item.complete ? \"strikethrough\" : \"\"}>{ item.title }</span>\n                        {/* <FormInput type=\"text\" className=\"change-title\" onChange={this.updateTitle(item)} value={ item.title } /> */}\n                        <span className=\"float-right\">\n                            <Button size=\"sm\" className=\"mr-2\" theme=\"info\" onClick={() => this.editItem(item)}>\n                                <FontAwesomeIcon icon={faEdit} />\n                            </Button>\n                            { this.renderActions(item) }\n                            <Button size=\"sm\" className=\"mr-2\" theme=\"danger\" onClick={() => this.deleteItem(item)}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </Button>\n                        </span>\n                    </ListGroupItem>\n                )\n        });\n    }\n\n    renderItems() {\n        if (this.state.items.length === 0) {\n            return (\n                <Col sm=\"12\">\n                    <div className=\"text-center no-items\">You have no items yet. Click the plus button add one!</div>\n                </Col>\n            )\n        }\n\n        return (\n            <Col lg>\n                <ListGroup>\n                    { this.renderList() }\n                </ListGroup>\n            </Col>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"checklist\">\n                <Navigation />\n                <Container>\n                    <Row className=\"justify-content-md-center mb-5\">\n                        <Col sm=\"9\">\n                            <h2>Your CheckList</h2>\n                        </Col>\n                        <Col sm=\"1\">\n                            <Button theme=\"light\" onClick={() => this.handleAddItemModal()}>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        { this.renderItems() }\n                    </Row>\n                </Container>\n\n                <AddItemModal open={this.state.showAddItemModal} handleAddItemModal={this.handleAddItemModal} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport apiClient from '../../api';\nimport config from \"../../config\";\nimport { withRouter } from 'react-router';\nimport Navigation from '../Navigation';\nimport { \n    Container,\n    Row,\n    Col,\n    Button,\n    Form,\n    FormGroup,\n    FormInput,\n    FormFeedback \n} from 'shards-react';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            email: '',\n            password: '',\n            showEmailError: false,\n            showPasswordError: false,\n            showNonFieldError: false,\n            nonFieldErrorMessage: '',\n        };\n    }\n\n    updateEmail = e => {\n        if (e.target.value !== '') {\n            this.setState({\n                username: e.target.value,\n                email: e.target.value,\n                showUsernameError: false,\n                showNonFieldError: false\n            });\n        }\n    }\n\n    updatePassword = e => {\n\n        if (e.target.value !== '') {\n            this.setState({ \n                password: e.target.value,\n                showPasswordError: false,\n                showNonFieldError: false\n            });\n        }\n    }\n\n    submitForm = e => {\n        e.preventDefault();\n        this.setState({ showError: false });\n\n        apiClient.post(`${config.API_URL}/token-auth/`, {\n            username: this.state.username,\n            password: this.state.password\n        })\n        .then(res => {\n            localStorage.setItem('auth_token', res.data.token);\n            this.props.history.push('/list');\n        })\n        .catch(err => {\n            if (err.response) {\n                if (err.response.data.email || err.response.data.username) {\n                    this.setState({ showEmailError: true })\n                }\n\n                if (err.response.data.password) {\n                    this.setState({ showPasswordError: true })\n                }\n\n                if (err.response.data.non_field_errors) {\n                    this.setState(() => ({ \n                        showNonFieldError: true,\n                        nonFieldErrorMessage: err.response.data.non_field_errors\n                    }));\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navigation />\n                <Container>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <h3 className=\"mb-4\">Log in to your Account</h3>\n                            <Form>\n                                <FormGroup>\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <FormInput invalid={ this.state.showEmailError } id=\"email\" type=\"text\" onChange={this.updateEmail} />\n                                    <FormFeedback type=\"invalid\">Please enter a valid email address</FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <label htmlFor=\"password\">Password</label>\n                                    <FormInput invalid={ this.state.showPasswordError } id=\"password\" type=\"password\" onChange={this.updatePassword} />\n                                    <FormFeedback type=\"invalid\">Please enter a password</FormFeedback>\n                                </FormGroup>\n                            </Form>\n\n                            <p className={this.state.showNonFieldError ? 'show-error' : 'hide-error'}>\n                                { this.state.nonFieldErrorMessage }\n                            </p>\n\n                            <Button className=\"mr-2\" theme=\"primary\" onClick={this.submitForm}>Log in</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <p className=\"aleady-a-user\">\n                                Don't have an account? <a href=\"/signup\" className=\"sign-in\">Sign up</a>\n                            </p>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Login);\n","import React, { Component } from 'react';\nimport apiClient from '../../api';\nimport config from \"../../config\";\nimport { withRouter } from 'react-router';\nimport Navigation from '../Navigation';\nimport { \n    Container,\n    Row,\n    Col,\n    Button,\n    Form,\n    FormGroup,\n    FormInput,\n    FormFeedback \n} from \"shards-react\";\n\nclass Signup extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            username: '',\n            email: '',\n            password: '',\n            showUsernameError: false,\n            showEmailError: false,\n            showPasswordError: false,\n            showNonFieldError: '',\n            nonFieldErrorMessage: '',\n        };\n    }\n\n    handleClose = () => {\n        this.setState({ open: false });\n    }\n\n    handleOpen = e => {\n        e.preventDefault();\n        this.setState({ open: true });\n    }\n\n    updateEmail = e => {\n        if (e.target.value !== '') {\n            this.setState({\n                username: e.target.value,\n                email: e.target.value,\n                showEmailError: false\n            });\n        }\n    }\n\n    updatePassword = e => {\n        if (e.target.value !== '') {\n            this.setState({ \n                password: e.target.value,\n                showPasswordError: false\n            });\n        }\n    }\n\n    submitForm = e => {\n        e.preventDefault();\n        this.setState({ showError: false });\n\n        apiClient.post(`${config.API_URL}/account/`, {\n            username: this.state.username,\n            email: this.state.email,\n            password: this.state.password\n        })\n        .then(res => {\n             this.props.history.push('/list');\n        })\n        .catch(err => {\n            if (err.response) {\n                if (err.response.data.email) {\n                    this.setState({ showEmailError: true })\n                }\n\n                if (err.response.data.password) {\n                    this.setState({ showPasswordError: true })\n                }\n\n\n                this.setState(() => ({ \n                    showNonFieldError: true,\n                    nonFieldErrorMessage: err.response.data.non_field_errors\n                }));\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navigation />\n                <Container>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <h3 className=\"mb-4\">Sign up for an Account</h3>\n                            <Form>\n                                <FormGroup>\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <FormInput invalid={ this.state.showEmailError } id=\"email\" type=\"email\" onChange={this.updateEmail} />\n                                    <FormFeedback className=\"text-danger\">Please enter valid email address.</FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <label htmlFor=\"email\">Password</label>\n                                    <FormInput invalid={ this.state.showPasswordError } id=\"password\" type=\"password\" onChange={this.updatePassword} />\n                                    <FormFeedback type=\"invalid\">Please enter a password</FormFeedback>\n                                </FormGroup>\n                            </Form>\n\n                            <p className={this.state.showNonFieldError ? 'show-error' : 'hide-error'}>\n                                { this.state.nonFieldErrorMessage }\n                            </p>\n\n                            <Button className=\"mr-2\" theme=\"primary\" onClick={this.submitForm}>Sign up</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <p className=\"aleady-a-user\">\n                                Already have an account? <a href=\"/login\" className=\"sign-in\">Log in</a>\n                            </p>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Signup);\n","import React, { Component } from 'react';\nimport apiClient from '../api';\nimport config from \"../config\";\nimport { withRouter } from 'react-router';\nimport Navigation from './Navigation';\nimport { \n    Container,\n    Row,\n    Col,\n    Button,\n    Form,\n    FormGroup,\n    FormInput,\n    FormFeedback,\n    Alert\n} from 'shards-react';\n\nclass Account extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            account: {\n                id: null,\n                email: '',\n            },\n            fields: {\n                email: '',\n            },\n            password: '',\n            confirm_password: '',\n            showNonFieldError: '',\n            nonFieldErrorMessage: '',\n            showEmailError: false,\n            showEmailUpdatedSuccessMessage: false,\n            showPasswordError: false,\n            showPasswordUpdatedSuccessMessage: false,\n            passwordError: '',\n        };\n\n        this.dismissEmailUpdateSuccessMessage = this.dismissEmailUpdateSuccessMessage.bind(this);\n        this.dismissPasswordUpdateSuccessMessage = this.dismissPasswordUpdateSuccessMessage.bind(this);\n    }\n\n    componentDidMount() {\n        this.populateForm();\n    }\n\n    dismissEmailUpdateSuccessMessage() {\n        this.setState({ showEmailUpdatedSuccessMessage: false });\n    }\n\n    dismissPasswordUpdateSuccessMessage() {\n        this.setState({ showPasswordUpdatedSuccessMessage: false })\n    }\n\n    populateForm = e => {\n        apiClient.get(`${config.API_URL}/account/`)\n            .then(res => {\n                let accountInfo = res.data[0];\n                this.setState({\n                    account: accountInfo,\n                    fields: { \n                        email: accountInfo.email\n                    }\n                });\n            })\n            .catch(err => {\n                if (err.response) {\n                    // redirect to login page....\n                }\n            });\n    }\n\n    updateEmail = e => {\n        this.setState({\n            fields: {\n                email: e.target.value\n            },\n            showEmailError: false\n        });\n    }\n\n    submitUpdateAccountForm = e => {\n        e.preventDefault();\n        this.setState({ showEmailError: false });\n\n        apiClient.patch(`${config.API_URL}/account/${this.state.account.id}/`, {\n            username: this.state.fields.username,\n            email: this.state.fields.email\n        })\n        .then(res => {\n            this.setState({ showEmailUpdatedSuccessMessage: true });\n        })\n        .catch(err => {\n            if (err.response) {\n                if (err.response.data.email) {\n                    this.setState({ showEmailError: true })\n                }\n\n                if (err.response.data.non_field_errors) {\n                    this.setState(() => ({ \n                        showNonFieldError: true,\n                        nonFieldErrorMessage: err.response.data.non_field_errors\n                    }));\n                }\n            }\n        });\n    }\n\n    updatePassword = e => {\n        this.setState({\n            password: e.target.value,\n            showPasswordError: false\n        });\n    }\n\n    updateConfirmPassword = e => {\n        this.setState({\n            confirm_password: e.target.value,\n            showPasswordError: false\n        });\n    }\n\n    submitUpdatePasswordForm = e => {\n        e.preventDefault();\n        this.setState({ showPasswordError: false });\n\n        apiClient.post(`${config.API_URL}/account/${this.state.account.id}/change-password/`, {\n            password: this.state.password,\n            confirm_password: this.state.confirm_password\n        })\n        .then(res => {\n            this.setState({ showPasswordUpdatedSuccessMessage: true });\n        })\n        .catch(err => {\n            if (err.response) {\n                if (err.response.data.password) {\n                    this.setState({ \n                        passwordError: err.response.data.password,\n                        showPasswordError: true \n                    })\n                }\n\n                if (err.response.data.non_field_errors) {\n                    this.setState(() => ({ \n                        showNonFieldError: true,\n                        nonFieldErrorMessage: err.response.data.non_field_errors\n                    }));\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navigation />\n                <Container>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"10\">\n                            <Alert theme=\"success\" dismissible={ this.dismissEmailUpdateSuccessMessage } open={ this.state.showEmailUpdatedSuccessMessage }>\n                                Your email address has been updated!\n                            </Alert>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <h3 className=\"mb-4\">Account Information</h3>\n                            <Form>\n                                <FormGroup>\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <FormInput invalid={ this.state.showEmailError } value={ this.state.fields.email || '' } id=\"email\" type=\"email\" onChange={ this.updateEmail } />\n                                    <FormFeedback className=\"text-danger\">Please enter valid email address.</FormFeedback>\n                                </FormGroup>\n                            </Form>\n\n                            <p className={this.state.showNonFieldError ? 'show-error' : 'hide-error'}>\n                                { this.state.nonFieldErrorMessage }\n                            </p>\n\n                            <Button className=\"mr-2\" theme=\"primary\" onClick={this.submitUpdateAccountForm}>Update</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center mt-5\">\n                        <Col sm=\"10\">\n                            <Alert theme=\"success\" dismissible={ this.dismissPasswordUpdateSuccessMessage } open={ this.state.showPasswordUpdatedSuccessMessage }>\n                                Your password has been updated!\n                            </Alert>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col sm=\"8\">\n                            <h3 className=\"mb-4\">Change Password</h3>\n                            <Form>\n                                <FormGroup>\n                                    <label htmlFor=\"password\">New Password</label>\n                                    <FormInput invalid={ this.state.showPasswordError } id=\"password\" type=\"password\" onChange={ this.updatePassword } />\n                                </FormGroup>\n                                <FormGroup>\n                                    <label htmlFor=\"password_confirmation\">Confirm New Password</label>\n                                    <FormInput invalid={ this.state.showPasswordError } id=\"confirm_password\" type=\"password\" onChange={ this.updateConfirmPassword } />\n                                </FormGroup>\n                            </Form>\n\n                            <p className={this.state.showPasswordError ? 'show-error' : 'hide-error'}>\n                                { this.state.passwordError }\n                            </p>\n\n                            <Button className=\"mr-2\" theme=\"primary\" onClick={ this.submitUpdatePasswordForm }>Update</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Account);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nclass ProtectedRoute extends React.Component {\n\n    render() {\n        const Component = this.props.component;\n        const isAuthenticated = localStorage.getItem('auth_token');\n\n        return isAuthenticated ? (\n            <Component />\n        ) : (\n            <Redirect to={{ pathname: '/' }} />\n        );\n    }\n}\n\nexport default ProtectedRoute;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './components/Home';\nimport CheckList from './components/CheckList';\nimport Login from './components/auth/Login';\nimport Signup from './components/auth/Signup';\nimport Account from './components/Account';\nimport ProtectedRoute from './components/ProtectedRoute';\n\nfunction App() {\n\n    const isAuthenticated = localStorage.getItem('auth_token');\n\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" exact>\n                    {isAuthenticated ? <Redirect to=\"/list\" /> : <Home />} \n                </Route>\n                <Route path=\"/login\" exact component={Login} />\n                <Route path=\"/signup\" exact component={Signup} />\n                <ProtectedRoute path =\"/list\" exact component={CheckList} />\n                <ProtectedRoute path =\"/account\" exact component={Account} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}